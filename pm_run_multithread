#!/usr/bin/env python3

#################### ALESSANDRO RIDOLFI ########################
#                        Version 1.3                           #
#               Bonn, Nov2017 - Bonn Lug2024                   #
################################################################

import sys
import os
import os.path
import time
import datetime
import glob
import subprocess
from multiprocessing.pool import ThreadPool


def execute_and_log_bash(command, work_dir, id_num, N_ids, flag_log=1):
       datetime_start = (datetime.datetime.now()).strftime("%Y/%m/%d  %H:%M")
       datetime_start_single_string = (datetime.datetime.now()).strftime("%Y%m%d_%H%M")
       time_start = time.time()
       if "/" in command.split()[0]:
              command_label = command.split("/")[-1].split()[0]
       else:
              command_label = command.split()[0]
              
       for i in range(len(list_for_Popen)):
              current_piece = list_for_Popen[i]

              if "?" in current_piece or "*" in current_piece:
                     new_list_for_Popen = list_for_Popen[:i] + sorted(glob.glob(current_piece)) + list_for_Popen[i+1:]
                     list_for_Popen = new_list_for_Popen

       if flag_log == 1:
              log_filename = "LOG_%03d_%s_%s.txt" % (int(id_num)+1, command_label, datetime_start_single_string)
              log_file = open(log_filename, "w+")
              log_file.write("****************************************************************\n")
              log_file.write("START DATE AND TIME: %s\n" % (datetime_start))
              log_file.write("\nCOMMAND:\n")
              log_file.write("%s\n\n" % (command))
              log_file.write("WORKING DIRECTORY: %s\n" % (work_dir))
              log_file.write("****************************************************************\n")
              log_file.flush()
              command_logged = "%s 2>&1 %s" % (command, log_filename)
              os.system(command_logged)
       elif flag_log == 0:
              print("Not logging..")
              proc = subprocess.Popen(list_for_Popen, cwd=work_dir, stdout=subprocess.PIPE)
              os.system(command)

       datetime_end = (datetime.datetime.now()).strftime("%Y/%m/%d  %H:%M")
       time_end = time.time()
       
       log_file.write("\nEND DATE AND TIME: %s\n" % (datetime_end))
       log_file.write("\nTOTAL TIME TAKEN: %d s\n" % (time_end - time_start))
       log_file.close()
       print("Command %4d/%d ('%s') complete." % (id_num+1, N_ids, command_label)); sys.stdout.flush()
       

def execute_and_log(command, work_dir, id_num, N_ids, flag_log=1):
       datetime_start = (datetime.datetime.now()).strftime("%Y/%m/%d  %H:%M")
       datetime_start_single_string = (datetime.datetime.now()).strftime("%Y%m%d_%H%M")
       time_start = time.time()
       if "/" in command.split()[0]:
              command_label = command.split("/")[-1].split()[0]
       else:
              command_label = command.split()[0]
       list_for_Popen = command.split()
       
       for i in range(len(list_for_Popen)):
              current_piece = list_for_Popen[i]
              
              if "?" in current_piece or "*" in current_piece:
                     new_list_for_Popen = list_for_Popen[:i] + sorted(glob.glob(current_piece)) + list_for_Popen[i+1:]
                     list_for_Popen = new_list_for_Popen

       #print("Running command #%d/%d ('%s')..." % (int(id_num)+1, int(N_ids), command_label))
       if flag_log == 1:
              log_filename = "LOG_%03d_%s_%s.txt" % (int(id_num)+1, command_label, datetime_start_single_string)
              log_file = open(log_filename, "w+")
              log_file.write("****************************************************************\n")
              log_file.write("START DATE AND TIME: %s\n" % (datetime_start))
              log_file.write("\nCOMMAND:\n")
              log_file.write("%s\n\n" % (command))
              log_file.write("WORKING DIRECTORY: %s\n" % (work_dir))
              log_file.write("****************************************************************\n")
              log_file.flush()
              proc = subprocess.Popen(list_for_Popen, cwd=work_dir, stdout=log_file, stderr=log_file)
       elif flag_log == 0:
              print("Not logging..")
              proc = subprocess.Popen(list_for_Popen, cwd=work_dir, stdout=subprocess.PIPE)
       proc.communicate()  # Wait for the process to complete

       datetime_end = (datetime.datetime.now()).strftime("%Y/%m/%d  %H:%M")
       time_end = time.time()
       
       log_file.write("\nEND DATE AND TIME: %s\n" % (datetime_end))
       log_file.write("\nTOTAL TIME TAKEN: %d s\n" % (time_end - time_start))
       log_file.close()
       print("Command %4d/%d ('%s') complete." % (id_num+1, N_ids, command_label)); sys.stdout.flush()


       
# ARGOMENTI DA SHELL
string_version = "1.3 (31Lug2024)"
flag_background = 0

cmdfile = ""
flag_log = 1
flag_bash = 0
ncpus = 1
sleep_time_s = 0.1


if (len(sys.argv) == 1 or ("-h" in sys.argv) or ("-help" in sys.argv) or ("--help" in sys.argv)):
       print("Usage: %s -cmdfile \"commands.sh\" -ncpus N [-nolog] [-background] [-sleep_time [s] ] " % (os.path.basename(sys.argv[0])))
       exit()
elif (("-version" in sys.argv) or ("--version" in sys.argv)):
       print("Version: %s" % (string_version))
       exit()
else:
       for j in range(1, len(sys.argv)):
              if (sys.argv[j] == "-cmdfile"):
                     cmdfile_name = sys.argv[j+1]
              elif (sys.argv[j] == "-ncpus"):
                     ncpus = int(sys.argv[j+1])
              elif (sys.argv[j] == "-nolog"):
                     flag_log = 0
              elif (sys.argv[j] == "-background"):
                     flag_background = 1
              elif (sys.argv[j] == "-bash"):
                     flag_bash = 1
              elif (sys.argv[j] == "-sleep_time"):
                     sleep_time_s = float(sys.argv[j+1])


list_commands = []
list_work_dirs = []
cmdfile = open(cmdfile_name, "r")

for line in cmdfile:
       if not line.strip().startswith("#") and line !="\n":
              if line.startswith("work_dir="):
                     list_line = line.strip().split()
                     list_work_dirs.append(list_line[0].split("=")[-1]  )
                     list_commands.append(" ".join(list_line[1:])  )
              else:
                     list_work_dirs.append(os.getcwd() )
                     list_commands.append(line.strip())

N_ids = len(list_commands)
                     
print()
print("#"*62)
print("#" + " "*15 + "PSRALEX - %-20s" % (os.path.basename(sys.argv[0])) + " "*15 + "#")
print("#"*62)
print()
print()
print("Commands to execute in %d threads:" % (ncpus))
print()
for i in range(N_ids):
       print("%3d) %s " % (i, list_commands[i]))
print()


TP = ThreadPool(ncpus)
for i in range(N_ids):
       time.sleep(sleep_time_s)
       if flag_bash == 1:
              TP.apply_async(execute_and_log_bash, (list_commands[i], list_work_dirs[i], i, N_ids, flag_log) )
       else:
              TP.apply_async(execute_and_log, (list_commands[i], list_work_dirs[i], i, N_ids, flag_log) )
if flag_log == 1:
       print("Running and logging %d commands at once..." % (ncpus)); sys.stdout.flush()
else:
       print("Running %d commands at once without logging..." % (ncpus)); sys.stdout.flush()

print()
if flag_background == 0:
       TP.close()
       TP.join()
       print()
       print("%d commands completed!" % (N_ids))
else:
       print()
       print("Processes are now running in background.")
